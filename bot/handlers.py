from telegram.ext import CommandHandler, ConversationHandler, MessageHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from bot.pdf_utils import send_pdf_to_user
from bot.database import save_user_data, create_user_if_not_exists, get_user_data
from bot.phone_utils import normalize_phone_number
from bot.database import get_session, User
import httpx

timeout = httpx.Timeout(60.0)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞ –≤ 60 —Å–µ–∫—É–Ω–¥
client = httpx.AsyncClient(timeout=timeout)

ASK_NAME, ASK_BIRTHDAY, CONFIRM_BIRTHDAY, ASK_PHONE, CONFIRM_PHONE, ASK_FILE_SELECTION = range(6)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("FULL UPDATE:", update)
    print("Received /start command, update.message:", update.message)
    tg_id = update.effective_user.id
    user_data = get_user_data(tg_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞
    print(f"Received /start command from {tg_id}")

    if user_data:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–π–ª–∞
        name = user_data["name"]
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {name}! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)!" + " \n " + " \n "
                                                                                                 "–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –∞—Å—Ç—Ä–æ-–º–µ—Ç–æ–¥–∏—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–ª—É—á—à–∞—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏: \n" + "\n"
                                                                                                                                                                                  "1. ¬´–ü–†–û–Ø–í–õ–ï–ù–ù–û–°–¢–¨¬ª ‚òÄÔ∏è\n–¢—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫ —Å—Ç–∞—Ç—å –∑–∞–º–µ—Ç–Ω–µ–µ –¥–ª—è –º–∏—Ä–∞, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å —É–¥–∞—á—É –∏ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º –≤ —Å–µ–±–µ —á–µ–ª–æ–≤–µ–∫–æ–º \n" + "\n"
                                                                                                                                                                                                                                                                                                            "2. ¬´–ö–ê–ö –í–õ–Æ–ë–ò–¢–¨ –ú–£–ñ–ß–ò–ù–£¬ª üíñ\n–ò—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ª–∞–π—Ñ—Ö–∞–∫–∏, —Ç—ã –∑–∞–ø–∞–¥–∞–µ—à—å –≤–æ–∑–ª—é–±–ª–µ–Ω–Ω–æ–º—É –≤ —Å–∞–º–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ \n" + "\n"
                                        )
        keyboard = ReplyKeyboardMarkup([
            ["¬´–ü–†–û–Ø–í–õ–ï–ù–ù–û–°–¢–¨¬ª ‚òÄÔ∏è"],
            ["¬´–ö–ê–ö –í–õ–Æ–ë–ò–¢–¨ –ú–£–ñ–ß–ò–ù–£¬ª üíñ"]
        ], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥–∏—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å üëá",
            reply_markup=keyboard
        )
        return ASK_FILE_SELECTION

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    create_user_if_not_exists(tg_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –ù–∞–¥–∏ –ú–∞–µ–≤—Å–∫–æ–π üíó\n" + "\n"
                                                                                           "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

    return ASK_NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)")
    return ASK_BIRTHDAY


async def get_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birthday"] = update.message.text

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–ê", callback_data="confirm_birthday_yes")],
        [InlineKeyboardButton("–ù–ï–¢", callback_data="confirm_birthday_no")]
    ])
    await update.message.reply_text(
        f"–¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {context.user_data['birthday']}, –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard
    )
    return CONFIRM_BIRTHDAY


async def confirm_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_birthday_yes":
        await query.message.reply_text("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return ASK_PHONE
    else:
        await query.message.reply_text("–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â—ë —Ä–∞–∑ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return ASK_BIRTHDAY


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_phone = update.message.text
    phone = normalize_phone_number(raw_phone)

    if not phone:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return ASK_PHONE

    context.user_data["phone"] = phone

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–ê", callback_data="confirm_phone_yes")],
        [InlineKeyboardButton("–ù–ï–¢", callback_data="confirm_phone_no")]
    ])
    await update.message.reply_text(
        f"–¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}, –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard
    )
    return CONFIRM_PHONE


async def confirm_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_phone_yes":
        tg_id = query.from_user.id
        save_user_data(
            tg_id,
            name=context.user_data["name"],
            birthday=context.user_data["birthday"],
            phone=context.user_data["phone"],
        )
        await query.message.reply_text("–°–ø–∞—Å–∏–±–æ!ü•∞")

        keyboard = ReplyKeyboardMarkup([
            ["¬´–ü–†–û–Ø–í–õ–ï–ù–ù–û–°–¢–¨¬ª ‚òÄÔ∏è"],
            ["¬´–ö–ê–ö –í–õ–Æ–ë–ò–¢–¨ –ú–£–ñ–ß–ò–ù–£¬ª üíñ"]
        ], resize_keyboard=True, one_time_keyboard=True)

        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥–∏—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å üëá",
            reply_markup=keyboard
        )
        return ASK_FILE_SELECTION

    else:
        await query.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â—ë —Ä–∞–∑:")
        return ASK_PHONE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    return ConversationHandler.END


async def handle_file_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # <<< —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

    tg_id = query.from_user.id
    print(f"Button clicked: {query.data}")

    if query.data == 'yes':
        keyboard = ReplyKeyboardMarkup([
            ["¬´–ü–†–û–Ø–í–õ–ï–ù–ù–û–°–¢–¨¬ª ‚òÄÔ∏è"],
            ["¬´–ö–ê–ö –í–õ–Æ–ë–ò–¢–¨ –ú–£–ñ–ß–ò–ù–£¬ª üíñ"]
        ], resize_keyboard=True, one_time_keyboard=True)

        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –º–µ—Ç–æ–¥–∏—á–∫—É üëá",
            reply_markup=keyboard
        )
        return ASK_FILE_SELECTION

    elif query.data == 'no':
        await query.message.reply_text(
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! –ë—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æü§©\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥—É—é –º–µ—Ç–æ–¥–∏—á–∫—É ‚Äî –Ω–∞–ø–∏—à–∏ /start"
        )
        return ConversationHandler.END


async def get_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    tg_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    with get_session() as session:
        user_data = session.query(User).filter_by(tg_id=tg_id).first()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    if text in ['1', '¬´–ü–†–û–Ø–í–õ–ï–ù–ù–û–°–¢–¨¬ª ‚òÄÔ∏è']:
        filename = "–ü—Ä–æ—è–≤–ª–µ–Ω–Ω–æ—Å—Ç—å.pdf"
        file_id = '1'
    elif text in ['2', '¬´–ö–ê–ö –í–õ–Æ–ë–ò–¢–¨ –ú–£–ñ–ß–ò–ù–£¬ª üíñ']:
        filename = "–ö–∞–∫ –≤–ª—é–±–∏—Ç—å –º—É–∂—á–∏–Ω—É.pdf"
        file_id = '2'
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥–∏—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return ASK_FILE_SELECTION

    await send_pdf_to_user(update, context, filename)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª)
    if not user_data.has_received_pdf:
        if file_id == '1':
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–∏—è–π! ‚ú®\n\n"
                                            "–ò –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –≤ –Ω–∞—à–µ –¥—Ä—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –¢–∞–º –º–æ—Ä–µ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–µ–π –æ—Ç –º–µ–Ω—è: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –ø–æ–¥–∫–∞—Å—Ç—ã –∏ –µ—â—ë –±–æ–ª—å—à–µ –∞—Å—Ç—Ä–æ-–º–µ—Ç–æ–¥–∏—á–µ–∫ üëáüèª\n\n" + "–¢—ã –≤—Å—ë –Ω–∞–π–¥–µ—à—å –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º –ø–æ—Å—Ç–µ \"–ù–∞–≤–∏–≥–∞—Ü–∏—è\"" + "\n"
                                                                                                                                                                                                                                                  "\nhttps://t.me/nadyamaevskayaa"
                                            )
        elif file_id == '2':
            await update.message.reply_text(
                "–£–¥–∞—á–∏ –≤ –ª—é–±–≤–∏! üíï\n\n"
                "–ò –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –≤ –Ω–∞—à–µ –¥—Ä—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –¢–∞–º –º–æ—Ä–µ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–µ–π –æ—Ç –º–µ–Ω—è: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –ø–æ–¥–∫–∞—Å—Ç—ã –∏ –µ—â—ë –±–æ–ª—å—à–µ –∞—Å—Ç—Ä–æ-–º–µ—Ç–æ–¥–∏—á–µ–∫ ‚ú®üëáüèª\n\n" + "–¢—ã –≤—Å—ë –Ω–∞–π–¥–µ—à—å –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º –ø–æ—Å—Ç–µ \"–ù–∞–≤–∏–≥–∞—Ü–∏—è\"" + "\n"
                                                                                                                                                                                                                      "\nhttps://t.me/nadyamaevskayaa"
            )
        with get_session() as session:
            user_in_session = session.query(User).filter_by(tg_id=tg_id).first()
            user_in_session.has_received_pdf = True
            session.commit()

    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF ‚Äî inline-–∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç
    await update.message.reply_text("–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª?", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞", callback_data='yes')],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data='no')]
    ]))

    return ASK_FILE_SELECTION


def register_handlers(app):
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            ASK_BIRTHDAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthday)],
            CONFIRM_BIRTHDAY: [CallbackQueryHandler(confirm_birthday, pattern='^confirm_birthday_')],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            CONFIRM_PHONE: [CallbackQueryHandler(confirm_phone, pattern='^confirm_phone_')],
            ASK_FILE_SELECTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_pdf),
                CallbackQueryHandler(handle_file_selection, pattern='^(yes|no)$')
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω handler: ConversationHandler
    app.add_handler(conversation_handler)
